#!/bin/bash
####################################################################
# Prey Mac Specific Functions - by Tomas Pollak (bootlog.org) and Diego Torres (warorface.com)
# URL : http://preyproject.com
# License: GPLv3
####################################################################

run_as_current_user(){
	if [ "`whoami`" == "root" ]; then
		launchctl bsexec $logged_pid $1
	else
		$1
	fi
}

get_gateway_ip() {
	if [ -z "$gateway_ip" ]; then
		netstat=`which netstat`
		if [ -n "$netstat" ]; then
			gateway_ip=`$netstat -rn | grep default | cut -c20-35`
		fi
	fi
}

get_wifi_info() {
	wifi_info=`$airport -I | grep -v "Off"`
	if [ -z "$wifi_info" ]; then
		# Turn on wifi
		networksetup -setairportpower Airport on
		wifi_info=`$airport -I | grep -v "Off"`
	fi
}

try_to_connect() {
	# restart airport service
	networksetup -setnetworkserviceenabled AirPort off 2>/dev/null
	networksetup -setnetworkserviceenabled AirPort on 2>/dev/null

	if [ $osx_version == "snow-leopard" ]; then
		local airportstring="Airport"
	fi

	# power on the airport
	networksetup -setairportpower $airportstring off 2>/dev/null
	networksetup -setairportpower $airportstring on 2>/dev/null

	# list available access points and parse to get first SSID with security "NONE"
	local essid=`$airport -s | grep NONE | head -1 | cut -c1-33 | sed 's/^[ \t]*//'`

	if [ -n "$essid" ]; then
		networksetup -setairportnetwork $airportstring $essid 2>/dev/null
	fi
}

############################################
# updater-specific functions
############################################

# check plist, shutdown task
pre_update_hook(){
	return 0
}

# post update hooks go in here
post_update_hook(){
	log ' -- Reloading Prey...'
	$base_path/prey.sh & # lets restart prey now
}

############################################
# Device creation parameters
############################################
get_pc_info(){
	pc_name=`system_profiler SPSoftwareDataType | grep 'Computer Name' | sed 's/.*: //g'`
	pc_os_version=$osx_version

	local is_macbook=`system_profiler SPHardwareDataType | grep -i 'macbook'`
	if [ -z "$is_macbook" ]; then
		pc_type="Desktop"
	else
		pc_type="Portable"
	fi

}
