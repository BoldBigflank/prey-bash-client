#!/bin/bash
####################################################################
# Prey Mac Specific Functions - by Tomas Pollak (bootlog.org) and Diego Torres (warorface.com)
# URL : http://preyproject.com
# License: GPLv3
####################################################################

run_as_current_user(){
	if [ "`whoami`" == "root" ]; then
		launchctl bsexec $logged_pid `eval echo $1`
	else
		eval $1
	fi
}

####################################################################
# network stuff
####################################################################

get_mac_address() {
	networksetup -getmacaddress $1 2> /dev/null | sed "s/.*: \([a-f0-9:]*\) .*/\1/"
}

get_ip_address(){
	ipconfig getifaddr $1 2> /dev/null
}

get_netmask(){
	ipconfig getoption $1 subnet_mask 2> /dev/null
}

get_gateway_ip() {
	ipconfig getoption $1 router 2> /dev/null
}

get_dns_ip() {
	ipconfig getoption $1 domain_name_server 2> /dev/null
}

get_wifi_info() {
	wifi_info=$($airport -s | grep -v "Off")
	if [ -z "$wifi_info" ]; then
		enable_airport
		wifi_info=$($airport -s | grep -v "Off")
	fi
}

disable_airport(){
	if [ $osx_version == "snow-leopard" ]; then
		local airportstring="Airport"
	fi
	networksetup -setnetworkserviceenabled AirPort off 2>/dev/null
	networksetup -setairportpower $airportstring off 2>/dev/null
}

enable_airport(){
	if [ $osx_version == "snow-leopard" ]; then
		local airportstring="Airport"
	fi
	networksetup -setnetworkserviceenabled AirPort on 2>/dev/null
	networksetup -setairportpower $airportstring on 2>/dev/null
}

try_to_connect() {
	disable_airport
	enable_airport

	# list available access points and parse to get first SSID with security "NONE"
	local essid=$($airport -s | grep NONE | sort -k3 -r | head -1 | cut -c1-32 | sed 's/^[ \t]*//')

	if [ -n "$essid" ]; then
		if [ $osx_version == "snow-leopard" ]; then
			local airportstring="Airport"
		fi
		networksetup -setairportnetwork $airportstring "$essid" 2>/dev/null
	fi
}

############################################
# trigger enabling functions
############################################

# echoes 1 if it is
is_trigger_loaded(){
	launchctl list | grep "$launchd_trigger_label" > /dev/null && echo 1
}

reload_trigger(){
	log " -- Setting up network detection trigger on LaunchDaemon..."
	local trigger_plist_path="/Library/LaunchDaemons/${launchd_trigger_label}.plist"
	if [ ! -e "$trigger_plist_path" ]; then
		# ln -s "$(full_path $base_path)/${platform_path}/${launchd_trigger_label}.plist" "$trigger_plist_path"		
		cp "${platform_path}/${launchd_trigger_label}.plist" "$trigger_plist_path"
		chown root: "${trigger_plist_path}"

		if [ $? != 0 ]; then
			log " !! Couldn't copy Prey Trigger Plist into /Library/LaunchDaemons!"
			return 1
		fi
	fi
	launchctl load "$trigger_plist_path"
#	launchctl unload "${trigger_plist_path}"

}

# unloads trigger from launchd and removes plist file
unload_trigger(){
	local trigger_plist_path="/Library/LaunchDaemons/${launchd_trigger_label}.plist"
	log " -- Removing network detection trigger from LaunchDaemon..."
	rm -f "${trigger_plist_path}"
}

unload_trigger

############################################
# updater-specific functions
############################################

# check plist, shutdown task
pre_update_hook(){
	return 0
}

# post update hooks go in here
post_update_hook(){
	log ' -- Reloading Prey...'
	$base_path/prey.sh & # lets restart prey now
}

############################################
# Device creation parameters
############################################
get_pc_info(){
	pc_name=$(system_profiler SPSoftwareDataType | grep 'Computer Name' | sed 's/.*: //g')
	pc_os_version=$osx_version

	local is_macbook=$(system_profiler SPHardwareDataType | grep -i 'macbook')
	if [ -z "$is_macbook" ]; then
		pc_type="Desktop"
	else
		pc_type="Laptop"
	fi

}
