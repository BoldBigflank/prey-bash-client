#!/bin/bash
###################################################################
# Prey Windows Specific Functions - by Tomas Pollak (bootlog.org)
# URL: http://preyproject.com
# License: GPLv3
####################################################################

get_pid(){
	processes | grep "$1" | sed 's/[a-z\. ]*\([0-9]*\).*/\1/'
}

############################################
# verification stuff
############################################

verify_installation(){
	# check prey service on
	echo " -- Checking if Prey system service is running..."
	local prey_service=`sc query "PreyService" | grep STATE`
	if [ -n "$prey_service" ]; then
		echo ' -- Prey service installed.'
		if [ -n "`echo $prey_service | grep RUNNING`" ]; then
			echo ' -- Prey service running!'
		else
			echo ' !! Prey service not running!'
		fi
	else
		echo ' !! Prey service not installed!'
	fi

	# check net framework
	echo ' -- Checking for installed .NET Framework...'
	if [ "`is_net_framework_installed`" == 1 ]; then
		echo " -- Required .NET version $required_net_version or newer is installed. All good."
	else
		echo " !! .NET framework version $required_net_version or newer not installed!"
	fi
}

# returns 1 if it is
is_net_framework_installed() {
	local version=`echo $required_net_version | sed 's/\..\./\./'`
	local results=`reg query "HKLM\Software\Microsoft\NET Framework Setup\NDP" | sed -e '1,2d' -e 's/[^0-9.]//g' | grep -v "^$"`

	for result in `echo -e "$results"`; do
		if [[ "$result" == "$version" || `is_bigger_than $result $version` == 1 ]]; then
			echo 1
			break
		fi
	done
	return 0
}

# a simple way to check if the current running user can edit files from within prey
user_has_access(){
	mv "$base_path/version" "$base_path/version.tmp" 2> /dev/null
	if [ $? == 0 ]; then
		mv "$base_path/version.tmp" "$base_path/version"
		echo 1
	fi
}

############################################
# core network functions
############################################

get_gateway_ip() {
	if [ -z "$gateway_ip" ]; then
		gateway_ip=`ipconfig | grep Gateway | sed 's/^.*: //g' | grep -v '^$' | head -1`
	fi
}

get_internal_ip() {
	if [ -z "$internal_ip" ]; then
		internal_ip=`ipconfig | grep "Address" | grep -v "local" | sed 's/^.*: //g' | grep -v '^$' | head -1`
	fi
}

get_wifi_info() {
	if [ "`is_net_framework_installed`" == 1 ]; then
		wifi_info=`autowc.exe -list`
	else
		echo " !! .NET framework version $required_net_version or newer not installed!"
	fi
}

try_to_connect() {
	if [ "`is_net_framework_installed`" == 1 ]; then
		autowc.exe -connect 2> /dev/null
	else
		echo " !! .NET framework version $required_net_version or newer not installed!"
	fi
}

############################################
# module functions
############################################

get_current_delay() {
	local delay_in_miliseconds=`reg query "$prey_reg_key" //v "Delay" | grep Delay | sed "s/[^0-9]*//"`
	echo $(($delay_in_miliseconds/60000))
}

update_execution_delay() {
	local delay_in_miliseconds=$(($1*60*1000))
	reg add "$prey_reg_key" //v "Delay" //d "$delay_in_miliseconds" //f > /dev/null
}

############################################
# module functions
############################################

is_module_active() {
	cat "$base_path/modules/$1/active" 2> /dev/null
}

############################################
# updater-specific functions
############################################

reset_permissions(){
	if [ -n "$winxp" ]; then
		local command="echo y| cacls.exe"
		local readonly="//t //c //p Everyone:r //g Administrators:f"
		local fullaccess="//t //c //p Everyone:f"
	else
		local command='Icacls.exe'
		local readonly="//T //C //grant Everyone:R"
		local fullaccess="//T //C //grant Everyone:F"
	fi
	echo ' -- Resetting permissions...'
	# perhaps we should iterate over the diff file and only apply this on the
	# modified files, but seems like overkill to me -- Tomas
	eval $command \"$base_path/*\" "$readonly" &> /dev/null
	eval $command \"$base_path/prey.log\" "$fullaccess" &> /dev/null
	# eval $command \"$platform_path\tmp\" "$fullaccess" &> /dev/null
}

# lets make sure the running user has write access to the files,
# otherwise we wont be able to patch or replace them
pre_update_check(){
	if [ -z `user_has_access` ]; then
		echo " -- Unfortunately the current user who's running Prey cannot perform the upgrade."
		return 1
	fi
	return 0
}

pre_update_hook(){

	# we also need to make sure the configurator is not running, so we can
	# also update it in case its necessary
	local configurator_running=`is_process_running 'prey-config.exe'`
	if [ -n "$configurator_running" ]; then
		echo ' -- Forcing shutdown of Prey Configurator... Sorry!'
		TASKKILL //F //IM prey-config.exe //T &> /dev/null
	fi

	return $?
}

# lets restart prey so it refreshes with the new status
post_update_hook(){
	reset_permissions
	echo ' -- Reloading Prey...'
	net stop PreyService
	net start PreyService
}

############################################
# Device creation parameters
############################################
get_pc_info(){

	pc_name=`hostname`
	pc_os_number=`wmic os get caption | grep -i 'microsoft'`

	if [ -z `echo "$pc_os_number" | grep '7'` ]; then
		pc_os_version="7"
	elif [ -z `echo "$pc_os_number" | grep -i 'xp'` ]; then
		pc_os_version="XP"
	else
		pc_os_version="Vista"
	fi

  chassis_type=`wmic systemenclosure get ChassisTypes | grep '{' | sed 's/[^0-9]//g'`
	if [[ $chassis_type == "8" || $chassis_type == "9" || $chassis_type == "10" || $chassis_type == "11" || $chassis_type == "14" ]]; then
		pc_type="Portable"
	else
		pc_type="Desktop"
	fi

}
