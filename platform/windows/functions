#!/bin/bash
###################################################################
# Prey Windows Specific Functions - by Tomas Pollak (bootlog.org)
# URL: http://preyproject.com
# License: GPLv3
####################################################################

file_size(){
	ls -l "$1" | cut -f16 -d " "
}

# returns 1 if it is
is_net_framework_installed() {
	local version=`echo $required_net_version | sed 's/\..\./\./'`
	local results=`reg query "HKLM\Software\Microsoft\NET Framework Setup\NDP" | sed -e 's/.*NDP\\\v//g' -e 's/\..\./\./' -e 's/[A-Z!].*//g' | grep -v "^$"`

	for result in `echo -e "$results"`; do
		if [[ "$result" == "$version" || `is_bigger_than $result $version` == 1 ]]; then
			echo 1
			break
		fi
	done
	return 0
}

# a simple way to check if the current running user can edit files from within prey
user_has_access(){
	mv "$base_path/README" "$BASE_PATH/README.tmp" 2> /dev/null
	if [ $? == 0 ]; then
		mv "$base_path/README.tmp" "$base_path/README"
		echo 1
	fi
}

get_gateway_ip() {
	gateway_ip=`ipconfig | grep Gateway | sed 's/^.*: //g' | grep -v '^$' | head -1`
}

get_wifi_info() {
	if [ "`is_net_framework_installed`" == 1 ]; then
		wifi_info=`autowc.exe -list`
	else
		echo " !! .NET framework version $required_net_version or newer not installed!"
	fi
}

try_to_connect() {
	if [ "`is_net_framework_installed`" == 1 ]; then
		autowc.exe -connect 2> /dev/null
	else
		echo " !! .NET framework version $required_net_version or newer not installed!"
	fi
}

############################################
# module functions
############################################

get_current_delay() {
	local delay_in_miliseconds=`reg query "$prey_reg_key" //v "Delay" | grep Delay | sed "s/[^0-9]*//"`
	echo $(($delay_in_miliseconds/60000))
}

update_execution_delay() {
	local delay_in_miliseconds=$(($1*60*1000))
	reg add "$prey_reg_key" //v "Delay" //d "$delay_in_miliseconds" //f > /dev/null
}

############################################
# module functions
############################################

is_module_active() {
	cat $base_path/modules/$1/active 2> /dev/null
}

############################################
# updater-specific functions
############################################

reset_permissions(){
	if [ -n "$winxp" ]; then
		local command="echo y| cacls.exe"
		local readonly="//t //c //p Everyone:r //g Administrators:f"
		local fullaccess="//t //c //p Everyone:f"
	else
		local command='Icacls.exe'
		local readonly="//T //C //grant Everyone:R"
		local fullaccess="//T //C //grant Everyone:F"
	fi
	echo ' -- Resetting permissions...'
	# perhaps we should iterate over the diff file and only apply this on the
	# modified files, but seems like overkill to me -- Tomas
	eval $command \"$base_path/*\" "$readonly" &> /dev/null
	eval $command \"$base_path/prey.log\" "$fullaccess" &> /dev/null
	# eval $command \"$platform_path\tmp\" "$fullaccess" &> /dev/null
}

# lets make sure we kill the cron process, otherwise we wont be able to
# replace it with a newer one
pre_update_check(){
	if [ -z `user_has_access` ]; then
		echo " -- Unfortunately the current user who's running Prey cannot perform the upgrade."
		return 1
	fi
	return 0
}

pre_update_hook(){
	echo ' -- Shutting down Prey daemon...'
	TASKKILL //F //IM cron.exe //T &> /dev/null

	# we also need to make sure the configurator is not running, so we can
	# also update it in case its necessary
	if [ -n `is_process_running 'prey-config.exe'` ]; then
		echo ' -- Forcing shutdown of Prey Configurator... Sorry!'
		TASKKILL //F //IM prey-config.exe //T &> /dev/null
	fi

	return $?
}

# lets reset the cron.exe so it refreshes with the new status
post_update_hook(){
	reset_permissions
	echo ' -- Reloading Prey...'
	"$platform_path\cron.exe" &
}
