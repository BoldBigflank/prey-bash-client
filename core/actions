#!/bin/bash
####################################################################
# Prey Core Action Functions - by Tomas Pollak (bootlog.org)
# URL: http://preyproject.com
# License: GPLv3
####################################################################

log_action(){
	echo "$1" >> $tmpbase/prey-actions.log
}

# modules can queue specific actions by calling
# add_action 'module_name' 'function_name'
add_action(){
	echo " ++ Queueing action for $1 module!"
	if [ -z "$2" ]; then
		function=1
	else
		function=$2
	fi
	actions[${#actions[*]}]="${1}=${function}"
}

# sets the running pid to the action/module name
add_running_action(){
	running_actions[${#running_actions[*]}]="${1}=${2}"
}

get_action(){
	get_var actions $1
}

# gets the pid of the running process
get_running_action(){
	get_var running_actions $1
}

action_callback(){
	until read -st 1; do
		echo -n ""
	done

	echo "Action done. Running callback!"
	eval '$1 $REPLY'
}

update_device_info_with(){

	echo ' -- Updating device info...'
	local response=`getter -i -X PUT -u $api_key:x $check_url/devices/$device_key.xml -d "$1"`

	get_status_code
	if [ $status == "200" ]; then
		echo " -- Device updated."
	else
		echo " -- Couldn't update your device. Maybe the Control Panel is taking a bath."
	fi

}

# receives the pid name, assigns it to the module name
create_pidfile_for(){
	echo " -- Creating pidfile for $current_module's $1..."
	echo $1 > "$tmpbase/prey-$current_module.pid"
}

unload_action(){
	echo " -- Unloading $1 from memory..."
	local pidfile="$tmpbase/prey-$1.pid"
	kill -- -`cat $pidfile` &> /dev/null
}

remove_pidfile(){
	local pidfile="$tmpbase/prey-$1.pid"
	if [ -f "$pidfile" ]; then
		echo ' -- Removing pidfile...'
		rm -f "$pidfile" 2> /dev/null
	else
		echo ' -- Pidfile doesnt exist!'
	fi
}

check_running_actions(){
	for pidfile in "$tmpbase/prey-*.pid"; do

		if [ ! -f $pidfile ]; then
			continue # this is to skip the actual prey-* we may get as a response
		fi

		local action_name=`basename $pidfile | sed -e 's/prey-//' -e 's/\.pid//'`
		echo " -- Found running action: $action_name"

		if [ -z `get_action $action_name` ]; then # action was removed from options
			# echo " -- Removing $action_name which was untoggled by user..."
			unload_action $action_name
			sleep 1
		else
			add_running_action $action_name `cat $pidfile`
		fi

	done
}

action_finished(){
	if [[ -n "$2" && `get_running_action $2` == $1 ]]; then
		wait $1
		return_status=$?
		echo " -- Action $2 exited with status $return_status."
		remove_pidfile $2
	fi
}

run_pending_actions(){

	if [ "${#actions[*]}" -gt 0 ]; then

		# -b -> Cause the status of terminated background jobs to be reported immediately,
		# rather than before printing the next primary prompt.
		# -m job control enabled
		set -bm

		echo -e "\n${bold} -- Running pending actions...${bold_end}\n"
		for action in "${actions[@]}"; do

			local current_module=`echo $action | sed 's/=.*//'`
			local function=`echo $action | sed 's/.*=//'`

			if [ ! -z `get_running_action $current_module` ]; then
				echo " -- $current_module is already running! Skipping..."
				continue
			fi

			initialize_module $current_module
			if [ $? == 1 ]; then
				continue
			fi

			if [ "$function" != "1" ]; then # specific function requested
				echo " -- Running action $function from $current_module module."
				eval "$function" &
			else # no specific action requested, we'll assume there's a run file
				echo -e "\n${bold} >> Running $current_module module!${bold_end}\n"
				. "$module_path/core/run" &
			fi

			pid=$!
			create_pidfile_for $pid
			add_running_action $current_module $pid
			trap 'action_finished $pid $current_module' SIGCHLD

		done

		wait
		echo -e " -- No pending actions left. All done!\n"
	fi

}
