#!/bin/bash
####################################################################
# Prey Core Pull Functions - by Tomas Pollak (bootlog.org)
# URL: http://preyproject.com
# License: GPLv3
####################################################################

# returns if we have have network access, otherwise 0
# you can check against the gateway or the net, change it if you like
check_net_status(){
	# get_gateway_ip
	# net_check_target=$gateway_ip
	echo ' -- Looking for connection...'

	local net_check_target="www.google.com"
	if [ "$os" == "windows" ]; then
		local ping_params='-n'
	else
		local ping_params='-q -c'
	fi
	connected=`ping $ping_params 1 $net_check_target &> /dev/null && echo 1 || echo 0`

	# if there's no connection with ping, lets try to see if curl gets through
	# since some routers/networks block ICMP requests
	if [[ $connected == 0 ]]; then
		echo ' -- Trying alternate method...'
		connected=`getter $net_check_target &> /dev/null && echo 1 || echo 0`
	fi
}

# we could eventually use a different method for status checking
check_device_status(){
	if [ "$post_method" == 'http' ]; then
		if [ -n "$device_key" ]; then
			local check_url="$check_url/devices/$device_key.xml"
		else
			echo -e " !! You need to enter your Device Key for HTTP Check!\n"
			exit 1
		fi
	fi
	response=`getter -i $check_url`
	get_status_code
}

get_status_code(){
	status=`echo -e "$response" | grep 'HTTP/' | cut -d" " -f2`
}

check_valid_keys(){
	response=`getter "$user_agent" -u $api_key:x -i $check_url/devices.xml`
	get_status_code

	if [ "$status" == "401" ]; then
		echo -e " !! API key not valid! Got $status status code.\n"
			return 1
	else
		echo  ' ** API key is valid.'
		if [[ "$status" == "200" && `find_in "$response" "<key>$device_key</key>"` ]]; then
			echo -e ' ** Device key is valid.\n'
		else
			echo -e ' !! Device key not valid!\n'
			return 1
		fi
	fi
	return 0
}

# we may eventually use a specific header for Prey
parse_headers(){
	content_type=`echo "$response" | grep "Content-Type" | sed 's/.*: \([a-z\/-]*\).*/\1/'`
}

# this is where the magic will happen. :)
# some ideas:
	# if its a shell script, run it and post back the response
	# if its a zip file, unzip it in modules and run the active modules (the executable ones)
	# if its a xml/json file, parse it and assign config values correspondingly
process_response(){
	if [ "$content_type" == "application/xml" ]; then
		echo ' -- Got XML. Parsing...'
		response_type='xml'
	elif [ "$content_type" == "text/xml" ]; then
		echo ' -- Got XML. Parsing...'
		response_type='xml'
	# elif [ "$content_type" == "application/octet-stream" ]; then
	# 	echo ' -- Got a stream! What shall we do with it?'
	#		response_type='zip'
	elif [ "$content_type" == "text/plain" ]; then
		echo ' -- Got a text file! Lets see if its something we can actually run.'
		response_type='text'
	elif [ "$content_type" == "text/html" ]; then
		echo " -- Response was an HTML file. Lets just do our job."
		return
	else
		echo " !! Couldn't determine Content-Type for response. Your Check URL is probably incorrect."
		return
	fi
	eval 'process_'"${response_type}"''
}
