#!/bin/bash
####################################################################
# Prey Core Basic Functions - by Tomas Pollak (bootlog.org)
# URL: http://preyproject.com
# License: GPLv3
####################################################################

####################################################################
# local var storage
####################################################################

# fetches a var and then assigns it as $value
# expects the name of hash and then the name of var
get_var(){
	HASH="$1[*]"
	local ${!HASH}
	eval 'echo ${'"${2}"'} | sed "s/%20/ /g"'
}

# if you need to fetch a specific trace or file
get_trace(){
	get_var traces ${current_module}__$1
}

get_file(){
	get_var files ${current_module}__$1
}

####################################################################
# trace functions
####################################################################

add_trace(){
	local urlencoded=`urlencode "$2"`
	local trace="${current_module}__$1=$urlencoded"
	echo -e " ++ Adding trace for $current_module: $1"
	# we need to encode whitespaces, otherwise well get into trouble
	traces[${#traces[*]}]="$trace"
}


separator='########################################################'

list_traces(){
	# echo " -- ${#traces[*]} traces gathered!"
	for t in "${traces[@]}"
	do
		if [ "$post_method" == 'http' ]; then
			# echo -n $t | sed 's/^\([^_].*\)__\([^=].*\)=\(.*\)/\1[\2]="\3"\&/' # query string
			# echo "-F $t" | sed 's/^\([^_].*\)__\([^=].*\)=\(.*\)/\1[\2]=\3/' # form field list
			# echo $t | sed 's/^\([^_].*\)__\([^=].*\)=\(.*\)$/<\2>\3<\/\2>/' # xml
			local start=`echo ${t%%=*}`
			local index=`echo $(( ${#start} + 1 ))`
			local trace_field=`echo "-F $start" | sed 's/^\(.*\)__\(.*\)/\1[\2]=/'`
			echo "${trace_field}${t:index}"
		else
			current_node=`echo $t | sed 's/__.*//'`
			if [ "$current_node" != "$previous_node" ]; then
				echo -e "$separator\n# $current_node\n$separator\n"
			fi
			# removes module name and replaces _'s with whitespaces
			echo -e "$t\n" | sed -e 's/^\([^_].*\)__/ :: /' -e 's/%20/ /g' -e 's/_/ /'
			previous_node=$current_node
		fi
	done
}

remove_traces(){
	unset -v traces
	echo ' -- Dropping all traces!'
}

####################################################################
# file functions
####################################################################

create_tmpdir(){
	# lets create our ultramegasecret temp dir
	if [ ! -d "$tmpdir" ]; then
		mkdir -p "$tmpdir" 2> /dev/null
		# we need to give access to the logged in user in order to save files
		if [ `whoami` == 'root' ]; then
				chmod 777 "$tmpdir" 2> /dev/null
		fi
	fi
}

delete_tmpdir(){
	rm -Rf "$tmpdir" 2> /dev/null
}

add_file(){
	if [ -f "$2" ]; then
		echo -e " ++ Adding file for $current_module: $1 -> $2"
		files[${#files[*]}]=${current_module}__$1=$2
	else
		echo " ${red}!!${color_end} Couldn't find file at $2!"
	fi
}

list_files(){
	# echo " -- ${#files[*]} files gathered!"
	for f in "${files[@]}"
	do
		if [ "$post_method" == 'http' ]; then
			# echo -e "-F $f" | sed -e 's/=/=@/'
			echo "-F $f" | sed 's/^\([^_].*\)__\([^=].*\)=\(.*\)/\1[\2]=@\3/'
		else # just list the file paths
			echo $f | sed 's/^.*=\(.*\)/\1/'
		fi
	done
}

remove_files(){
	for f in "${files[@]}"
	do
		file=`echo $f | sed 's/^.*=\(.*\)/\1/'`
		rm -f $file
		echo " -- Removed $file"
	done
	unset -v files
}

####################################################################
# string and integer functions
####################################################################

# finds a string within another
# usage find_in 'foobar' 'foo' -> echoes 1
find_in(){
	echo "${1}" | grep "${2}" 1>/dev/null && echo 1 || return 0
}

is_bigger_than() {
	echo "$1 $2" | awk '{if ($1 > $2) print 1; else print 0}'
}

urlencode(){
	echo "$1" | tr $line_breaker "^" | sed -e 's/%/%25/g;s/ /%20/g;s/!/%21/g;s/"/%22/g;s/#/%23/g;s/\$/%24/g;s/\&/%26/g;s/=/%3D/g;s/'\''/%27/g;s/(/%28/g;s/)/%29/g' -e "s/\^$//;s/\^/%0A/g"
}

# TODO: should switch to more advanced forms of encryption!
encrypt(){
	echo -n "$1" | openssl enc -base64
}

decrypt(){
	echo "$1" | openssl enc -base64 -d
}

####################################################################
# delay functions, mac and linux
####################################################################

get_current_delay(){
	crontab -l | grep prey | sed "s/^..\([0-9]*\).*/\1/"
}

update_execution_delay(){
	(crontab -l | grep -v prey; echo "*/$1 * * * * $base_path/prey.sh > /var/log/prey.log") | crontab -
}

####################################################################
# utility functions for managing process
####################################################################

function_exists() {
	type $1 2> /dev/null | grep -q 'is a function'
}

is_process_running(){
	processes | grep -v grep | grep "$1" > /dev/null && echo 1 || return 0
}

get_pid(){
	ps ax | grep "$1" | head -1 | cut -d ' ' -f1
}

####################################################################
# network core functions
####################################################################

get_internal_ip() {
	if [ -z "$internal_ip" ]; then
		internal_ip=`/sbin/ifconfig 2> /dev/null | grep "inet " | grep -v "127.0.0.1" | awk '{ print $2}' | sed 's/addr://' | head -1`
	fi
}

####################################################################
# check mode functions
####################################################################

verify_installation(){
	echo " -- Checking if cron daemon is running..."
	local cron_running=`is_process_running 'cron'`
	if [ $cron_running == 1 ]; then
		echo " -- Cron daemon found."
	else
		echo " !! Cron daemon not found! Try running it with 'sudo /etc/init.d/cron start'."
	fi
	echo " -- Checking for crontab entry..."
	local result=`crontab -l | grep 'prey.sh' | wc -l 2> /dev/null`
	if [ "$result" -gt 0 ]; then
		echo " -- Found!"
	else
		echo -e " !! Not found!\n -> It seems Prey's crontab entry was removed after installation. Please set again the running interval."
	fi
}
