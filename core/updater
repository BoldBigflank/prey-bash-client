#!/bin/bash
####################################################################
# Prey Core Updater Functions - by Tomas Pollak (bootlog.org)
# URL: http://preyproject.com
# License: GPLv3
####################################################################

####################################################################
# core files
####################################################################

package_size(){
	echo $(stat -c %s "$1")
}

####################################################################
# prey updater
####################################################################

fetch_update() {
	echo ' -- Fetching new Prey release...'
	wget "$update_package" -O $base_path/updater.zip 2> /dev/null

	if [ `package_size "$base_path/updater.zip"` == 0 ]; then
		echo ' !! Couldnt get updater file! Skipping...'
		rm $base_path/updater.zip
		return 1
	fi

	echo ' -- Unpacking!'

	unzip -u $base_path/updater.zip -d $base_path/$updater_path > /dev/null
	return $?

}

test_and_apply_diff() {

	# -f forces
	# -p0 apply on current dir
	# -s silent
	# -N Ignore patches that seem to be reversed or already applied.
	patch_options="-N -f -s --backup-if-mismatch --remove-empty-files  --global-reject-file $rejects_file -p0 -i $diff_file"

	echo ' -- Testing if patch will apply cleanly...'
	patch --dry-run $patch_options > /dev/null

	if [ $? == 0 ]; then
		echo ' -- Everything smooth. Applying patch...'
		patch $patch_options 1> /dev/null
	else
		return 1
	fi

}

delete_files_according_to_diff() {

	STDOUT=$(grep "^Binary" $diff_file)

	while read file; do

		original=`echo "$file" | cut -d" " -f3`
		modified=`echo "$file" | cut -d" " -f5`

		if [ "$modified" == "/dev/null" ]; then # deleted file

			echo " -- Deleting file: $original"
			rm -f $original

		fi

	done <<< "$STDOUT"

}

copy_new_files(){

	mv $base_path/updater $tmpdir
	mv $base_path $tmpdir/prey.old
	mv $tmpdir/updater $base_path

	# if [ -d "$base_path/updater/platform/$os" ]; then
	# 	cp $base_path/updater/platform/$os/* -r -u $base_path/platform/$os/ # first, copy the platform specific stuff
	# fi

	# rm -Rf $base_path/updater/platform 2> /dev/null
	# cp updater/* -R $base_path/

}

remove_temp_stuff(){
	rm -Rf updater 2> /dev/null
	rm "$base_path/updater.zip" 2> /dev/null
}

update_prey() {

	remove_temp_stuff

	updater_path='updater'
	update_package="$updates_url/prey-updater-for-$version.zip"

	diff_file="$updater_path/changes.diff"
	rejects_file="rejected_changes.diff"

	fetch_update

	if [ $? != 0 ]; then
		echo ' !! Something went wrong while unzipping files. Skipping update.'
		return 1
	fi

	echo ' -- Updating files!'

	if [ -f "$diff_file" ]; then
		test_and_apply_diff
		if [ $? == 1 ]; then
			delete_files_according_to_diff
		else
			echo ' -- Something went wrong! Skipping patch...'
			# let the user know
			return 1 # not ok
		fi
	fi

	rm $diff_file
	copy_new_files
	remove_temp_stuff

	return 0

}

####################################################################
# module updater
####################################################################

get_module(){
	rm $base_path/modules/$1.zip 2> /dev/null
	wget --user=$api_key --password=x "$modules_url/modules/get/$1" -O $base_path/modules/$1.zip 2> /dev/null
}

install_or_update_module(){

	get_module $1

	if [ `package_size "$base_path/modules/$1.zip"` -gt 0 ]; then
		echo " -- Got new $1 module from repository! Unpackaging..."

		if [ -d "$base_path/modules/$1" ]; then # module already installed
			rm -Rf $base_path/modules/$1
		fi

		unzip $base_path/modules/$1.zip -d $base_path/modules &> /dev/null
		delete_unneeded_stuff_in $base_path/modules/$1/platform

		rm $base_path/modules/$1.zip

		echo " ** New $1 module placed and ready to go!"
		return 0
	else
		echo " !! Couldn't install $1 module from repository."
		return 1
	fi
}

delete_unneeded_stuff_in(){
	if [ -d "$1" ]; then
		rm -Rf `find $1 -not -iname "$os" -not -name "." -type d`
	fi
}
