#!/bin/bash
####################################################################
# Prey Core Updater Functions - by Tomas Pollak (bootlog.org)
# URL: http://preyproject.com
# License: GPLv3
####################################################################

####################################################################
# core files
####################################################################

update_prey(){

	diff_file="changes.diff"
	local update_package="$updates_url/prey-updater-for-$version.zip"

	echo ' -- Fetching new Prey release...'
	wget "$update_package" -O $base_path/updater.zip 2> /dev/null

	if [ ! -f "$base_path/updater.zip" ]; then
		echo ' !! Couldnt get updater file! Skipping...'
		return 0
	fi

	echo ' -- Unpacking!'

	unzip -u $base_path/updater.zip -d $base_path/updater

	echo ' -- Updating files!'

	if [ -f "$diff_file" ]; then

		# -f forces
		# -p0 apply on current dir
		if [ `patch --dry-run --backup-if-mismatch -f -p0 -i $diff_file` ]; then
			echo ' -- Applying patch!'
			patch --dry-run --backup-if-mismatch -f -p0 -i $diff_file
			delete_files_according_to_diff
		else
			return 1 # not ok
		fi

		rm $diff_file

	if [ -d "$base_path/updater/platform/$os" ]; then
		cd $base_path/updater/platform/$os
		cp * -r -u $base_path/platform/$os/ # first, copy the platform specific stuff
	fi

	cd $base_path/updater
	rm -Rf platform 2> /dev/null
	cp * -r -u $base_path/ # this will copy changes.diff to base_path as well
	cd $base_path

	fi

	rm -Rf updater
	rm "$base_path/updater.zip"

	return 0

}

delete_files_according_to_diff() {

	STDOUT=$(grep "Binary" $diff_file)

	while read file; do

		original=`echo "$file" | cut -d" " -f3`
		modified=`echo "$file" | cut -d" " -f5`

		if [ "$modified" == "/dev/null" ]; then # deleted file

			echo " -- Deleting file: $original"
			rm -f $original

		fi

	done <<< "$STDOUT"

}

####################################################################
# module updater
####################################################################

get_module(){
	rm $base_path/modules/$1.zip 2> /dev/null
	wget --user=$api_key --password=x "$modules_url/modules/get/$1" -O $base_path/modules/$1.zip 2> /dev/null
}

install_or_update_module(){

	get_module $1
	local package_size=$(stat -c %s "$base_path/modules/$1.zip")

	if [ $package_size -gt 0 ]; then
		echo " -- Got new $1 module from repository! Unpackaging..."

		if [ -d "$base_path/modules/$1" ]; then # module already installed
			rm -Rf $base_path/modules/$1
		fi

		unzip $base_path/modules/$1.zip -d $base_path/modules &> /dev/null
		delete_unneeded_stuff_in $base_path/modules/$1/platform

		rm $base_path/modules/$1.zip

		echo " ** New $1 module placed and ready to go!"
		return 0
	else
		echo " !! Couldn't install $1 module from repository."
		return 1
	fi
}

delete_unneeded_stuff_in(){
	if [ -d "$1" ]; then
		rm -Rf `find $1 -not -iname "$os" -not -name "." -type d`
	fi
}
