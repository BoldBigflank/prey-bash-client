#!/bin/bash
####################################################################
# Prey Core Updater Functions - by Tomas Pollak (bootlog.org)
# URL: http://preyproject.com
# License: GPLv3
####################################################################

####################################################################
# prey updater
####################################################################

check_for_failed_update(){
	if [ -f "$base_path/.update_failed" ]; then
		update_failed_for=`cat "$base_path/.update_failed"`
		if [ $update_failed_for == $version ]; then
			echo ' -- Already attempted to update to next version with no luck. Skipping!'
			return 1
		fi
	fi
	return 0
}

fetch_update() {

	echo ' -- Fetching new Prey release...'
	getter "$update_package" -o "$updater_file" 2> /dev/null

	if [[ $? != 0 || ! -f "$updater_file" ]]; then
		echo " !! Couldn't get updater file! Skipping..."
		rm $updater_file 2> /dev/null
		return 1
	fi
}

get_checksum_for() {
	getter "$1.md5sum" | sed 's/<.*>//' | cut -d ' ' -f1
}

validate_package(){
	local valid_md5=`get_checksum_for $update_package`

	if [ -z "$valid_md5" ]; then
		echo " !! Couldn't grab checksum from server. Skipping update..."
		return 1
	fi

	local package_md5=`md5sum $updater_file | sed 's/.*\([a-f0-9]\{32\}\).*/\1/' 2> /dev/null`

	if [ "$package_md5" != "$valid_md5" ]; then
		echo ' -- Invalid checksum for downloaded package. Cannot continue.'
		return 1
	fi
}

unzip_package(){
	echo ' -- Validated updater from source. Unpacking...'
	unzip -u $updater_file -d $updater_path > /dev/null
	return $?
}

test_diff() {

	# -f forces, dont ask any questions
	# -p0 leave paths as they are
	# -s silent
	# -N Ignore patches that seem to be reversed or already applied.
	# -F2 Fuzzyness. Default is 2 lines before and after.

	patch_options="-N -f -F2 --ignore-whitespace --backup-if-mismatch --remove-empty-files -d $base_path -p0 -i $diff_file"

	echo ' -- Testing if patch will apply cleanly...'
	outcome=`patcher --dry-run $patch_options`

	if [ `find_in "$outcome" 'FAILED'` ]; then
		echo -e " !! There seems to be discordances between your installed version and the official $version code. Skipping patch!"
		return 1
	else
		echo ' -- Everything smooth.'
	fi

	return 0

}

apply_diff(){
	echo ' -- Applying patch...'
	outcome=`patcher $patch_options > /dev/null`
	return $?
}

# this could be useful sometime in the future
report_update_status(){
	echo ' -- Notifying update status to your Control Panel account...'
	getter -X PUT -u $api_key:x $control_panel_url/devices/$device_key.xml -d "device[update_failed]=$1" &> /dev/null
}

delete_files_according_to_diff() {

	STDOUT=$(grep "^Binary" $diff_file)

	while read file; do

		local original=`echo "$file" | cut -d" " -f3`
		local modified=`echo "$file" | cut -d" " -f5`

		if [ "$modified" == "/dev/null" ]; then # deleted file

			echo " -- Deleting file: $original..."
			rm -f "$base_path/$original"

		fi

	done <<< "$STDOUT"

}

copy_new_files(){

	echo ' -- Updating new binary files in Prey...'

	if [ -d "$updater_path/platform/$os" ]; then
		cp -R $updater_path/platform/$os/* "$base_path/platform/$os" # first, copy the platform specific stuff
	fi

	rm -Rf $updater_path/platform 2> /dev/null
	cp -R $updater_path/* "$base_path" 2> /dev/null

}

remove_temp_stuff(){
	rm -Rf "$updater_path" 2> /dev/null
	rm -f "$updater_file" 2> /dev/null
}

download_and_test_update(){

	echo ' -- Removing leftovers...'
	remove_temp_stuff

	updater_path="$tmpdir/updater"
	updater_file="$tmpdir/updater.zip"
	update_package="$updates_url/prey-updater-for-$version.zip"

	diff_file="$updater_path/changes.diff"
	# rejects_file="$updater_path/rejected_changes.diff"

	fetch_update
	if [ $? == 1 ]; then return 1; fi
	validate_package
	if [ $? == 1 ]; then return 1; fi
	unzip_package
	if [ $? != 0 ]; then
		echo ' !! Something went wrong while unzipping files. Skipping update.'
		return 1
	fi

	if [ -f "$diff_file" ]; then
		test_diff
		return $?
	fi
}

apply_changes(){

	echo ' -- Updating files!'

	if [ -f "$diff_file" ]; then
		apply_diff
		if [ $? == 0 ]; then
			delete_files_according_to_diff
		else
			echo ' -- Something went wrong! Skipping patch...'
			return 1 # not ok
		fi
		rm "$diff_file" 2> /dev/null
	fi

	copy_new_files

	echo ' -- Cleaning up...'
	delete_unneeded_stuff_in "$base_path/platform"
	remove_temp_stuff

	return 0
}

perform_update() {

	pre_update_hook

	echo -e "\n${bold} >> Applying changes!${bold_end}\n"
	sleep 1

	apply_changes
	local update_status=$?

	# set current version as previous, to compare
	local previous_version=$version

	# get new version
	. "$base_path/version"


	if [[ $update_status == 0 && `is_bigger_than $version $previous_version` == 1 ]]; then

			echo " ** Update OK! New installed version of Prey is $version."

	else

		echo ' -- Something went wrong while updating!'
		echo "$previous_version" > $base_path/.update_failed

	fi

	report_update_status $update_status

	delete_tmpdir

	echo ' -- Running post-update hooks...'
	post_update_hook $update_status

	echo -e " -- All done! Exiting...\n"
	exit $update_status

}

run_prey_updater(){

	echo " -- Performing pre update checks..."

	check_for_failed_update
	if [ $? == 1 ]; then return 1; fi

	pre_update_check
	if [ $? == 1 ]; then return 1; fi

	echo -e "\n${bold} >> Running Prey updater!${bold_end}\n"

	download_and_test_update

	if [ $? == 0 ]; then

		# we update as a different process so we can
		# modify prey.sh in case we need to
		perform_update &
		exit 0

	fi
}

####################################################################
# module updater
####################################################################

get_module(){
	rm "$module_file" 2> /dev/null
	getter -u $api_key:x "$modules_url/modules/$1.zip" -o "$module_file" 2> /dev/null
}

install_or_update_module(){

	module_file="$tmpdir/module-$1.zip"

	get_module $1

	if [[ -f "$module_file" && `file_size "$module_file"` -gt 0 ]]; then
		echo " -- Got new $1 module from repository! Unpackaging..."

		echo ' -- Unzipping module...'
		unzip "$module_file" -d "$tmpdir/$1.tmp" &> /dev/null

		if [ $? == 0 ]; then

			if [ -d "$base_path/modules/$1" ]; then # module already installed
				echo ' -- Removing old module...'
				rm -Rf "$base_path/modules/$1"
			fi

			echo ' -- Putting new module in its right position...'
			mv "$tmpdir/$1.tmp/$1" "$base_path/modules/"

			echo ' -- Cleaning up...'
			delete_unneeded_stuff_in "$base_path/modules/$1/platform"
			rm "$module_file" 2> /dev/null

			echo " ** New $1 module placed and ready to go!"
			return 0
		fi
	else
		echo " -- Something went wrong while trying to fetch module from repository."
	fi

	echo " !! Couldn't get/install $1 module from repository."
	return 1

}

delete_unneeded_stuff_in(){
	if [ -d "$1" ]; then
		rm -Rf `find "$1" -mindepth 1 -maxdepth 1 -type d -not -iname "$os"`
	fi
}
